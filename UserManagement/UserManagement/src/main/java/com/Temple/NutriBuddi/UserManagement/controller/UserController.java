package com.Temple.NutriBuddi.UserManagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.Temple.NutriBuddi.UserManagement.model.User;
import com.Temple.NutriBuddi.UserManagement.repository.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /v1 (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;


	@GetMapping(path="/addNewUser") // Map ONLY GET Requests
	@ResponseBody
	public ResponseEntity<Object> addNewUser (@RequestParam String email
			, @RequestParam String password
			, @RequestParam String password2
			, @RequestParam String userName
			, @RequestParam String first
			, @RequestParam String last
			, @RequestParam String height
			, @RequestParam String weight
			, @RequestParam String age
			, @RequestParam String gender) {

        User user = new User();
		if (!email.equals("")) {
			if (userRepository.findByEmail(email) == null) {
				user.setEmail(email);
			} else {
				return new ResponseEntity<>("Email is already registered", HttpStatus.NOT_ACCEPTABLE);
			}
		} else {
			return new ResponseEntity<>("Valid email required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!password.equals("")) {
			if (password.equals(password2)) {
                user.setPassword(password);
			} else {
				return new ResponseEntity<>("Passwords must match", HttpStatus.NOT_ACCEPTABLE);
			}
		} else {
			return new ResponseEntity<>("Password required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!userName.equals("")) {
            user.setUserName(userName);
		} else {
			return new ResponseEntity<>("Username required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!first.equals("")) {
            user.setFirstName(first);
		} else {
			return new ResponseEntity<>("First name required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!last.equals("")) {
            user.setLastName(last);
		} else {
			return new ResponseEntity<>("Last name required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!height.equals("")) {
            user.setHeight(Integer.parseInt(height));
		} else {
			return new ResponseEntity<>("Height required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!weight.equals("")) {
            user.setWeight(Integer.parseInt(weight));
		} else {
			return new ResponseEntity<>("Weight required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!age.equals("")) {
            user.setAge(Integer.parseInt(age));
		} else {
			return new ResponseEntity<>("Age required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!gender.equals("")) {
            user.setGender(Integer.parseInt(gender));
		} else {
			return new ResponseEntity<>("Gender required", HttpStatus.NOT_ACCEPTABLE);
		}
		
		userRepository.save(user);
		return new ResponseEntity<>("User added", HttpStatus.OK);
	}
	
	@GetMapping(path="/updateUser") // Map ONLY GET Requests
	@ResponseBody
	public ResponseEntity<Object> updateUser (@RequestParam String email
			, @RequestParam String password
			, @RequestParam String password2
			, @RequestParam String height
			, @RequestParam String weight
			, @RequestParam String age
			, @RequestParam String gender) {

        User user;

        if (!email.equals("")) {
			if (userRepository.findByEmail(email) != null) {
                user = userRepository.findByEmail(email);
			} else {
				return new ResponseEntity<>("Email does not exist", HttpStatus.NOT_ACCEPTABLE);
			}
		} else {
			return new ResponseEntity<>("Valid email required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!password.equals("")) {
			if (password.equals(password2)) {
                user.setPassword(password);
			} else {
				return new ResponseEntity<>("Passwords must match", HttpStatus.NOT_ACCEPTABLE);
			}
		} else {
			return new ResponseEntity<>("Password required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!height.equals("")) {
            user.setHeight(Integer.parseInt(height));
		} else {
			return new ResponseEntity<>("Height required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!weight.equals("")) {
            user.setWeight(Integer.parseInt(weight));
		} else {
			return new ResponseEntity<>("Weight required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!age.equals("")) {
            user.setAge(Integer.parseInt(age));
		} else {
			return new ResponseEntity<>("Age required", HttpStatus.NOT_ACCEPTABLE);
		}

		if (!gender.equals("")) {
            user.setGender(Integer.parseInt(gender));
		} else {
			return new ResponseEntity<>("Gender required", HttpStatus.NOT_ACCEPTABLE);
		}
		
		
		userRepository.save(user);
		return new ResponseEntity<>("User Updated", HttpStatus.OK);
	}
	
	@GetMapping(path="/getUser") // Map ONLY GET Requests
	public @ResponseBody User getUser (@RequestParam String email) {
		
		return userRepository.findByEmail(email); 
	
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {

		return userRepository.findAll();
	}
	
	@GetMapping(path="/login")
	@ResponseBody
	public ResponseEntity<Object> userLogin(@RequestParam String email, @RequestParam String password) {
		
		User response = userRepository.findByEmailAndPassword(email, password);
		
		if (response == null)
			return new ResponseEntity<>("User email and password combination does not exist", HttpStatus.UNAUTHORIZED);
		
		return new ResponseEntity<>(response, HttpStatus.OK);
	}
}